// Generated by CoffeeScript 1.9.1
(function() {
  var Bot, Gitter, MessagesController, config, myBot;

  config = {
    token: '07dc1dd22949e996bb2aca176418de213de9cca3',
    room: process.argv[2] && process.argv[2] || 'racc-oo-n/uwc_gitter-bot'
  };

  Bot = (function() {
    function Bot(config) {
      var gitter, msgCtrl;
      gitter = new Gitter(config.token);
      msgCtrl = new MessagesController;
      gitter.joinRoom(config.room).then(function(room) {
        console.log('Join room:', room.name);
        return gitter.setRoom(room).addListener().on('message', function(message) {
          var txt;
          txt = message.text;
          if (msgCtrl.validate('calc', txt)) {
            return gitter.sendMessage(msgCtrl.calc(message.text));
          } else if (msgCtrl.validate('bye', txt)) {
            return gitter.sendMessage(msgCtrl.sayBye());
          } else if (msgCtrl.validate('hello', txt)) {
            return gitter.sendMessage(msgCtrl.sayHello());
          }
        });
      }).fail(function(err) {
        return console.log("Can't join room " + config.room + ":", err);
      });
    }

    return Bot;

  })();

  MessagesController = (function() {
    var messages, replace, validation;

    function MessagesController() {}

    messages = {
      'success': ":heavy_check_mark: ",
      'error': ':x: I can\'t solve it',
      'invalid': ':interrobang: I understand only: 0-9 + - * / ( )',
      'hello': 'Hello :earth_africa: !   I\'m Bot :space_invader:.   And I can solve some mathematical expressions for you. I accept expression like "calc ..." and understand operations: (), *, /, +, -    :sparkles::sparkles::sparkles:',
      'bye': ':door: Bye!'
    };

    validation = {
      'calc': /^calc/i,
      'disallow': /[^\d\+\-\*\/\(\)]+/,
      'bye': /bye|leave/ig,
      'hello': /hello|hi/ig
    };

    replace = {
      'calc': /^calc/i,
      'space': /\s/g
    };

    MessagesController.prototype.sayHello = function() {
      return messages['hello'];
    };

    MessagesController.prototype.sayBye = function() {
      return messages['bye'];
    };

    MessagesController.prototype.validate = function(type, message) {
      return validation[type].test(message);
    };

    MessagesController.prototype.clear = function(type, message) {
      return message.replace(replace[type], '');
    };

    MessagesController.prototype.calc = function(message) {
      var e, exp, expression, result;
      expression = this.clear('calc', message).trim();
      exp = this.clear('space', expression);
      if (!this.validate('disallow', exp)) {
        try {
          result = messages['success'] + expression + ' = ' + eval(exp);
        } catch (_error) {
          e = _error;
          result = messages['error'];
        }
      } else {
        result = messages['invalid'];
      }
      return result;
    };

    return MessagesController;

  })();

  Gitter = (function() {
    function Gitter(token) {
      this.gitter = new (require('node-gitter'))(token);
      return this;
    }

    Gitter.prototype.joinRoom = function(name) {
      return this.gitter.rooms.join(name);
    };

    Gitter.prototype.addListener = function() {
      var ref;
      return (ref = this.room) != null ? ref.listen() : void 0;
    };

    Gitter.prototype.setRoom = function(room) {
      this.room = room;
      return this;
    };

    Gitter.prototype.sendMessage = function(message) {
      var ref;
      if ((ref = this.room) != null) {
        ref.send(message);
      }
      return this;
    };

    return Gitter;

  })();

  myBot = new Bot(config);

}).call(this);
